#!/usr/bin/perl
#
#   This script is used to get information out of a Gaussian input file (or
#   a list of Gaussian input files).  To execute the script use the
#   command:
#
#       %>./ginput_info.pl [options] file_1 [file_2] ... [file_n]
#   
#   Filenames must include extensions.  Also, globs work.
#
#   No options are required.  The available options include:
#
#       -r      Get the route line from the input file(s).
#       -t      Get the title line from the input file(s).
#   
#   By default, NO OPTIONS ARE TURNED ON!
#
#
#   Hrant P. Hratchian
#   Department of Chemistry
#   Indiana University
#   hhratchi@indiana.edu
#
#
#
#   Load arrays and variables based on invocation arguments.
#
    ($do_substitutions,$do_comments,@filenames) = &set_options_sub(@ARGV);
    if(@filenames!=1){die "\n\nOne file must be provided, no more, no less!\n\n"}
#
#   Load the file contents into @file_in.
#
    open INFILE,"$filenames[0]";
    while(<INFILE>){
      chomp;
      push(@file_in,$_);
    }
    @file_out = @file_in;
#
#   Carry out file substitutions.
#
    if($do_substitutions){
      @temp = @file_out;
      ($num_substitutions,@file_out) = &do_file_substitutions_sub(@temp);
      until(!$num_substitutions){
        @temp = @file_out;
        ($num_substitutions,@file_out) = &do_file_substitutions_sub(@temp);
      }
    }
#
#   Remove comment lines.
#
    if($do_comments){
      @temp = @file_out;
      @file_out = &rm_comments_sub(@temp);
    }
#
#   Print out the final file.
#
    $final = join "\n",@file_out;
    print "$final\n";




##########################################################################
#                                                                        #
#                              SUBROUTINES                               #
#                                                                        #
##########################################################################

    sub set_options_sub{
#
#   This routine is used to read through the command line arguments and set
#   all of the related option flags used throughout this script.  As input,
#   this routine requires the ARGV array from the top program unit.  These
#   option flags (and the file list, when appropriate) are returned as a
#   list.
#
#
#   
      use strict;
      my($do_substitutions,$do_comments,@filenames);
      my($temp);
#
#     Interpret the list of command line arguments.
#
      $do_substitutions = 1;
      $do_comments = 1;
      foreach $temp (@_){
        chomp($temp);
        if($temp =~ /^-/){
          if($temp =~ /^-subs$/){
            $do_substitutions = 1;
          }elsif($temp =~ /^-nosubs$/){
            $do_substitutions = 0;
          }elsif($temp =~ /^-comments$/){
            $do_comments = 1;
          }elsif($temp =~ /^-nocomments$/){
            $do_comments = 0;
          }else{
            die "Unknown option: $temp\n\n";
          }
        }else{
          push(@filenames,$temp);
        }
      }
#
#     Return the interpreted option flags in the correct order.  Be sure to
#     always send arrays last.
#
      return
      ($do_substitutions,$do_comments,@filenames);
    }


    sub do_file_substitutions_sub{
#
#   This routine is used to read through each line in the input array and
#   expand any lines beginning with "@" by reading the file given after the
#   "@" symbol and placing that file's contents into the input file.
#
#   When this routine is called, the input array is taken to be an array
#   with each element giving a new line from the input file.  All lines
#   should be chomp'd.
#
#   On return, this routine gives the number of substitutions done followed
#   by an array that gives the modified version of the input array.
#
#
      use strict;
      my($num_substitutions,@output);
      my($temp,$sub_file);
#
#     Do the work...
#
      foreach $temp(@_){
        if($temp =~ /^@(.*)$/){
          $sub_file = $1;
          $sub_file =~ s/\/N\s*$//;
          $num_substitutions += 1;
          open SUBFILE,"$sub_file";
          while(<SUBFILE>){
            chomp;
            push(@output,$_);
          }
        }else{
          push(@output,$temp);
        }
      }
#
#     Return to the calling program.
#
      return ($num_substitutions,@output);
    }


    sub rm_comments_sub{
#
#   This routine is used to remove comment lines from the input file.
#   Comments are marked by "!" at the start of the line.
#
#   When this routine is called, the input array is taken to be an array
#   with each element giving a new line from the input file.  All lines
#   should be chomp'd.
#
#   On return, this routine gives the number of substitutions done followed
#   by an array that gives the modified version of the input array.
#
#
      use strict;
      my(@output);
      my($temp);
#
#     Do the work...
#
      foreach $temp(@_){
        if(!($temp =~ /^!/)){
          push(@output,$temp);
        }
      }
#
#     Return to the calling program.
#
      return (@output);
    }
